# using newer features of Docker Compose and thus this needs to be version 3 or higher.
version: "3"
# create a container here called “db” that is made from the MariaDB v10.2 Docker image
# create a new database called “drupal” on startup
# set the MariaDB root user’s password to “WaterfallSucks”
services:
  db:
    image: mariadb:10.2
    environment:
      MYSQL_DATABASE: drupal
      MYSQL_ROOT_PASSWORD: WaterfallSucks
    # specify that we want to use a Docker Volume called db_data to store the contents of /var/lib/mysql.
    # This directory is where MariaDB stores its information for the databases it contains.
    # It allows us to shutdown the containers and start them again later without losing any data saved in the database.
    volumes:
      - db_data:/var/lib/mysql
    restart: always
  # specify a second container called Drupal. The depends_on key tells Docker Compose to not start this container until the db container has started.
  drupal:
    depends_on:
      - db
    # tells Docker Compose to use the local Dockerfile as the basis for our image.
    # This means we can build on the fly without running a separate command, or worse, pushing to a public Docker repository for a quick dev change.
    build: .
    # map port 8080 on our local machine to port 80 within the Docker container
    # allows us to visit http://localhost:8080 in our browser
    ports:
      - "8080:80"
    # creating a bind mount
    # This takes the ./app directory that we will have in our repository on our local machine and makes it available as /app with the Docker container.
    # This is how we provide our Drupal site and any themes and modules into the container.
    volumes:
      - ./app:/app
    restart: always
# tells Docker Compose to create the volume we specified earlier in the config
volumes:
  db_data:
